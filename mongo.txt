Скрипт для отображения всех баз данных
show databases;
show dbs;

Список баз данных
admin     41 kB
config  61.4 kB
local     41 kB



Для использования базы данных и изменения коллекций, используется ключевое слово use
use DB_NAME;

Если база данных с указанным именем не существует, то она будет создана
В данном случае будет создана база данных mongo
use mongo;



Для создания коллекции, обращаемся к базе данных, и вызываем функцию добавления данных
db.createCollection("COLLECTION_NAME");



Для того что бы отобразить список всех коллекций в базе данных, используем Скрипт
show collections;



Для удаления базы данных, используется функция
db.dropDatabase();



Для добавления данных (Документ) в коллекцию, обращаемся к базе данных, затем к коллекции, и используем функцию для добавления данных. Передаем в функцию объект, в котором определены поля и данные, которые будут в этом документе

Устаревший вариант
db.COLLECTION_NAME.insert({name: "Some name", age: 23});

Новый вариант для добавления одной записи в коллекцию
db.COLLECTION_NAME.insertOne({name: "Some name", age: 23});

В данном случае
db.users.insert({
    name: "Username1",
    age: 23
})

Вариант для добавления множества данных в коллекцию. Передаем в функцию массив с объектами, которые будут добавлены в коллекцию
db.COLLECTION_NAME.insertMany([
    {name: "UserName1", age: 23},
    {name: "UserName2", age: 23},
    {name: "UserName3", age: 23},
])

В данном случае
db.users.insertMany([
    {name: "Some name1", age: 1},
    {name: "Some name2", age: 2},
    {name: "Some name3", age: 3},
])



Для получения всех данных из коллекции, используется функция
db.COLLECTION_NAME.find();

В данном случае
db.users.find();



Поиск данных по определенному критерию, будет осуществлен поиск по данному критерию, если есть данные отвечающие этому критерию, то они будут выведены, иначе ничего не будет возвращено. В функцию передаем объект с полем и определенными данными которые мы ищем
db.COLLECTION_NAME.find({
    age: 25
})

Поиск по нескольким критериям, будет осуществлен поиск по всем критериям, если не найдено данных по всем критериям, ничего не будет возвращено
db.COLLECTION_NAME.find({
    name: "Some user",
    age: 23
})



Условия поиска данных в коллекции.

Условие ИЛИ. В объекте указываем поле $or, которому присваиваем массив с объектами, по этим объектам и будет идти поиск данных
db.COLLECTION_NAME.find({
    $or: [
        {age: 10},
        {age: 20},
        {age: 30}
    ]
})

Условие МЕНЬШЕ, МЕНЬШЕ ИЛИ РАВНО, БОЛЬШЕ, БОЛЬШЕ ИЛИ РАВНО, НЕ РАВНО. В объекте указываем поле, по которому будем вести поиск, присваиваем этому полю объект с командой и значением, которые будут использованы в поиске

Условия поиска:
$lt - less than (Меньше чем)
$lte - less than or equal (Меньше чем или равно)
$gt - greater than (Больше чем)
$gte - greater than or equal (Больше чем или равно)
$ne - not equal (Не равно)

Меньше чем
db.COLLECTION_NAME.find({
    age: {
        $lt: 20
    }
})

Меньше чем или равно
db.COLLECTION_NAME.find({
    age: {
        $lte: 10
    }
})

Больше чем
db.COLLECTION_NAME.find({
    age: {
        $gt: 5
    }
})

Больше чем или равно
db.COLLECTION_NAME.find({
    age: {
        $gte: 7
    }
})

Не равно
db.COLLECTION_NAME.find({
    age: {
        $ne: 4
    }
})



Сортировка полученных данных. Указываем после функции find(), функцию sort(), в функции сортировки определяем объект, в котором указываем поле, по которому будет сортировка и указываем 1 или -1, для указания сортировки

1 - прямая сортировка, от меньшего к большему
-1 - прямая сортировка, от большего к меньшему

Сортировка всех полученных данных, от меньшего к большему
db.COLLECTION_NAME.find().sort({
    age: 1
})

Сортировка всех полученных данных, от большего к меньшему
db.COLLECTION_NAME.find().sort({
    age: -1
})


Ограничение на количество получаемых данных
db.COLLECTION_NAME.find().limit(4);


Поиск по id. Mongo по умолчанию добавляет уникальный id, каждому документу (Объекту)
db.COLLECTION_NAME.findOne({
    _id: ObjectId("625bd85fa29edf822b41f98d")
})



Обновление данных в объекте. Первым параметром задаем критерий для поиска нужного объекта, вторым параметром задаем объект с командой $set, которой присваиваем объект с обновленными полями и значениями

Устаревшая версия
db.COLLECTION_NAME.update(
    {
        name: "Vasya"
    },
    {
        $set: {
            name: "Vasilyi",
            age: 200
        }
    }
);

Новая версия для обновления одного объекта
db.COLLECTION_NAME.updateOne({}, {});

Новая версия для обновления множества объектов
db.COLLECTION_NAME.updateMany({}, {});



Для смены названия какого ни будь поля, используем команду $rename
db.COLLECTION_NAME.updateMany(
    {},
    {
        $rename: {
            name: "username"
        }
    }
)


Удаление определенной записи, первым параметром определяем объект с критериями
db.COLLECTION_NAME.deleteOne({
    age: 100
})



Связи - один ко многим
db.users.update(
    {username: "Some name4"},
    {
        $set: {
            posts: [
                {title: "JS", text: "JS top"},
                {title: "Mongo", text: "Mongo top"}
            ]
        }
    }
);

db.users.findOne(
    {username: "Some name4"},
    {posts: 1}
);